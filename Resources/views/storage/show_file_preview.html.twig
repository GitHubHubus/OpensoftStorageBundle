{% if file.mimeType == "application/pdf" %}

    <style>

        /* PDF notes */
        #storage-file-pdf-document-metadata {
            background-color: #fff;
            color: #333;
            position: absolute;
            max-height: 33vh; /* put reasonable list constraint */
            overflow-y: auto;
            box-shadow: 0 4px 10px rgba(0, 0, 0, .5);
            padding: 5px;
            display: none;
        }

        #storage-file-pdf-document-metadata DL {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
        }

        /* type */
        #storage-file-pdf-document-metadata DT {
            padding-right: 5px;
        }

        /* value */
        #storage-file-pdf-document-metadata DD {
            color: #333;
        }

    </style>

    {# layout nodes for handling errors, showing the rendered final output and placing contextual information about pdf#}
    <div id="storage-file-pdf-document-metadata"></div>
    <div id="storage-file-pdf-document-exception"></div>
    <canvas id="storage-file-pdf-layout"></canvas>

    <script type="text/javascript">

        // logic flow for dealing with PDF types
        (function () {
            "use strict";

            // business rules
            var businessRulesMap = {
                maximumRenderingFilesizeMegabytes: 100
            };

            // hold twig supplied data
            var fileDTO = {
                storageURL: "{{ storage_url(file) }}", // server side
                size: {{ file.size }}, // server side
                layout: {
                    canvas: document.getElementById("storage-file-pdf-layout"),
                    metadata: document.getElementById("storage-file-pdf-document-metadata"),
                    exception: document.getElementById("storage-file-pdf-document-exception"),
                    toolbar: document.querySelector(".storage-file-preview-container .ibox .ibox-tools"),
                    viewContainer: document.querySelector(".storage-file-preview-container .ibox .ibox-content")
                }
            };

            // places a button in the toolbar, wires up an event to react on click
            function addToolbarButton(label, iconIdentifier, onClickEventHandler) {
                var buttonTemplate = $('<a class= "btn btn-primary btn-xs"><i class="fa"></i></a>')
                        .on("click", onClickEventHandler)
                        .prependTo(fileDTO.layout.toolbar);

                buttonTemplate.find("i").addClass(iconIdentifier).after(label);
                return buttonTemplate;
            }


            // verify that file is not too big before trying to render inline
            if (fileDTO.size <= businessRulesMap.maximumRenderingFilesizeMegabytes * (1 << 20)) {
                window.addEventListener("DOMContentLoaded", function () {
                    var firstPageOrdinal = 1;
                    buildPDFPreview(fileDTO, firstPageOrdinal);
                });
            }
            else {
                // can't render big file. keep this use case here for
                var fileSizeMegabytes = (fileDTO.size / (1 << 20)).toFixed(2);
                fileDTO.layout.exception.innerHTML = "File too large to preview: " + fileSizeMegabytes + "MB";
            }

            // internal PDF spec details
            function logDetails(key, value) {
                $("<dl>").appendTo(fileDTO.layout.metadata)
                        .append($("<dt>", {text: key}))
                        .append($("<dd>", {text: value}))
            }

            // fetches URL and renders the PDF
            function buildPDFPreview(fileObject, pageNumber) {
                var api = window.PDFJS;
                // Setting worker path to worker bundle.
                window.PDFJS.workerSrc = "{{ asset('assets/libs/pdfjs-dist/build/pdf.worker.js') }}";

                // Fetch the PDF document from the URL using promises.
                api.getDocument(fileObject.storageURL).then(function (pdf) {

                    var $detailsBtn = addToolbarButton("PDF Details", "fa-file-text", onDetailsButtonClickEvent);
                    $detailsBtn.append($(fileDTO.layout.metadata));
                    $(fileDTO.layout.metadata).hide();
                    // relocate output for overlay
                    $(fileDTO.layout.canvas).before(fileDTO.layout.metadata);

                    // introspection of PDF internal state
                    pdf.getMetadata().then(function (data) {

                        logDetails("Pages", pdf.numPages);

                        var informationList = [data.info, data.metadata && data.metadata.metadata];

                        // loop over information sets and print in details within
                        informationList.forEach(function (elem) {
                            if (elem) {
                                Object.keys(elem).forEach(function (k) {
                                    var value = elem[k];
                                    // do not show nested objects
                                    if (typeof value !== "object") {
                                        var maxStringLength = 100;
                                        // truncate big/useless values
                                        if (value.length > maxStringLength) {
                                            value = value.substring(0, maxStringLength) + "...";
                                        }
                                        logDetails(k, value);
                                    }
                                });
                            }
                        });
                    });

                    // Fetch single page
                    pdf.getPage(pageNumber).then(function (page) {

                        // Prepare canvas using PDF page dimensions.
                        var canvas = fileDTO.layout.canvas;
                        // from layout
                        var knownLayoutPadding = parseInt(window.getComputedStyle(fileDTO.layout.viewContainer).paddingLeft, 10);
                        // honor padding
                        var layoutWidth = fileDTO.layout.viewContainer.getBoundingClientRect().width - ( knownLayoutPadding * 2);
                        var pageCoordinates = page.pageInfo.view;
                        // extracting known page dimensions
                        var pageWidth = pageCoordinates[2], pageHeight = pageCoordinates[3], pageRatio = pageWidth / pageHeight;

                        var scale = layoutWidth / pageWidth;
                        var viewport = page.getViewport(scale);

                        var context = canvas.getContext('2d');
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;

                        // Render PDF page into canvas context.
                        var renderContext = {
                            canvasContext: context,
                            viewport: viewport
                        };

                        var renderTask = page.render(renderContext);
                        return renderTask.promise;
                    });

                }).catch(function (reason) {
                    console.error('Error: ' + reason);
                });
            }

            // when the toolbar button for "Details" is clicked, show an overlay of PDF metadata
            function onDetailsButtonClickEvent() {
                $(fileDTO.layout.metadata).toggle("showing");
            }
        }());

    </script>

{% elseif file.mimeType starts with "image" %}

    <img src="{{ storage_url(file) }}" class="img-thumbnail img-responsive"/>

{% else %}

    No preview for type {{ file.mimeType }}  defined.

{% endif %}

